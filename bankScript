'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// BANKIST APP

/////////////////////////////////////////////////
// Data

const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],
  interestRate: 1.2, // %
  pin: 1111,

  movementsDates: [
    '2019-11-18T21:31:17.178Z',
    '2019-12-23T07:42:02.383Z',
    '2020-01-28T09:15:04.904Z',
    '2020-04-01T10:17:24.185Z',
    '2020-05-08T14:11:59.604Z',
    '2022-12-02T17:01:17.194Z',
    '2022-12-05T23:36:17.929Z',
    '2022-12-04T10:51:36.790Z',
  ],
  currency: 'EUR',
  locale: 'pt-PT', // de-DE
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,

  movementsDates: [
    '2019-11-01T13:15:33.035Z',
    '2019-11-30T09:48:16.867Z',
    '2019-12-25T06:04:23.907Z',
    '2020-01-25T14:18:46.235Z',
    '2020-02-05T16:33:06.386Z',
    '2020-04-10T14:43:26.374Z',
    '2020-06-25T18:49:59.371Z',
    '2020-07-26T12:01:20.894Z',
  ],
  currency: 'USD',
  locale: 'en-US',
};

const accounts = [account1, account2];

/////////////////////////////////////////////////
// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

//////////////////////////////////////////
//////////////////////////////////////////

const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

///// Internationalizing Currencies /////
const formatCur = function(value, locale, currency) {
  return Intl.NumberFormat(locale, {
    style: 'currency',
    currency: currency,
  }).format(value);
}

///// Internationalizing Dates //////
///// 'Today' 'Yesterday' 'X days ago' /////

const formatMovementDate = function(date, locale) {
  const calcDaysPassed = (date1, date2) => Math.abs(date2 - date1) / (1000 * 60 * 60 * 24);
  const daysPassed = Math.round(calcDaysPassed(new Date(), date));
  if (daysPassed === 0) return 'Today';
  if (daysPassed === 1) return 'Yesterday';
  if (daysPassed <= 7) return `${daysPassed} days ago`;
  else {
  return new Intl.DateTimeFormat(locale).format(date)
}}

///// Updating UI features /////
const calcDisplaySummary = function(mov) {
  const incomes = +mov.movements
  .filter(mov => mov > 0)
  .reduce((acc, mov)=> acc + mov, 0);
  labelSumIn.textContent = formatCur(incomes, currentAccount.locale, currentAccount.currency);

  const outcomes = +mov.movements
  .filter(mov => mov < 0)
  .reduce((acc, mov)=> acc - mov, 0);
  labelSumOut.textContent = formatCur(outcomes, currentAccount.locale, currentAccount.currency);

  const interest = +mov.movements
  .filter(mov => mov > 0)
  .map(deposit => deposit * mov.interestRate / 100)
  .filter(dep => dep >= 1)
  .reduce((acc, mov)=> acc + mov, 0);
  labelSumInterest.textContent = formatCur(interest, currentAccount.locale, currentAccount.currency)
}

const calcDisplayBalance = function(account){
  account.balance = +account.movements.reduce((acc, cur) => acc + cur, 0);
  labelBalance.textContent = formatCur(account.balance, account.locale, account.currency)
}

const makeUserName = function(accs){ 
  accs.forEach(function(acc){
    acc.userName = acc.owner
    .toLowerCase()
    .split(' ')
    .map(word => word[0]).join('');
  })
}
makeUserName(accounts);

const displayMovements = function(acc, sort = false) {
  containerMovements.innerHTML = '';

  const movs = sort ? acc.movements.slice().sort((a, b) => a - b) : acc.movements;
  
  movs.forEach(function(mov, i){
    const type = mov > 0 ? 'deposit' : 'withdrawal'
      const date = new Date(acc.movementsDates[i]);
      const displayDate = formatMovementDate(date, currentAccount.locale);
      const formattedCur = formatCur(mov, acc.locale, acc.currency)
    const html = `
    <div class="movements__row">
      <div class="movements__type movements__type--${type}">${i + 1} ${type}</div>
      <div class="movements__date">${displayDate}</div>
      <div class="movements__value">${formattedCur}</div>
    </div>`
    containerMovements.insertAdjacentHTML('afterbegin', html);
  })
}

///// Master Update UI Function /////
const updateUI = function(acc) {
  displayMovements(acc)
  calcDisplayBalance(acc)
  calcDisplaySummary(acc)
}

const startLogOutTimer = function() {
  const tick = function(){
    const min = String(Math.trunc(time / 60)).padStart(2, 0);
    const sec = String(Math.trunc(time % 60)).padStart(2, 0);
    labelTimer.textContent = `${min}:${sec}`;
    if (time === 0){
      labelWelcome.textContent = `Log in to get started`;
      containerApp.style.opacity = 0;
      clearInterval(timer)
    }
    time--;
  }
  let time = 120;
  tick();
  const timer = setInterval(tick, 1000)
  return timer;
}

// ------ Event Listeners ------

// LOGIN
let currentAccount, timer;
btnLogin.addEventListener('click', function(e){
  // Prevent for from submitting (A button's default option is to refresh the page)
  e.preventDefault();
  // Getting correct login information (initials: username, and PIN)
  currentAccount = accounts.find(acc => acc.userName === inputLoginUsername.value);
  if (+inputLoginPin.value === currentAccount?.pin) {
    // Display UI, change opacity in .app to 100 from 0
    containerApp.style.opacity = 100;
    labelWelcome.textContent = `Welcome back, ${currentAccount.owner.split(' ')[0]}`;
    const internationalNow = new Date();
    const options = {
      hour: 'numeric',
      minute: 'numeric',
      day: 'numeric',
      month: 'numeric', // Changing this to long will write out the month name
      year: 'numeric',
    }
    labelDate.textContent = new Intl.DateTimeFormat(currentAccount.locale, options)
    .format(internationalNow);
    // Display and Calculate Balances for account.
      updateUI(currentAccount);
    // Clear username / pin fields.
    inputLoginUsername.value = inputLoginPin.value = '';
    inputLoginPin.blur();
    if (timer) clearInterval(timer);
    timer = startLogOutTimer();
  }
})

// Sort Button
let sortState = false;
btnSort.addEventListener('click', function(e){
  e.preventDefault();
  displayMovements(currentAccount, !sortState);
  sortState = !sortState;
  clearInterval(timer)
  timer = startLogOutTimer();
})

// Transfer Function
btnTransfer.addEventListener('click', function(e){
  e.preventDefault();
    // Get the account money is transfering to
  const xferToAcc = accounts.find(acc => acc.userName === inputTransferTo.value)
  // get the amount of money being transfered
  const xferAmmount = +inputTransferAmount.value;
  // Add a movement to both accounts then use previous functions to do the work.
  if (xferAmmount > 0 && 
    xferToAcc && 
    currentAccount.balance >= xferAmmount && 
    xferToAcc?.userName !== currentAccount.userName){
      xferToAcc.movements.push(xferAmmount);
      currentAccount.movements.push(-Math.abs(xferAmmount));
      inputTransferAmount.value = inputTransferTo.value = '';
      // Adding timestamps to the transfers
      currentAccount.movementsDates.push(new Date().toISOString());
      xferToAcc.movementsDates.push(new Date().toISOString());

      updateUI(currentAccount);
      clearInterval(timer)
      timer = startLogOutTimer();
  }
  inputTransferAmount.value = inputTransferTo.value = '';
})

// Loan Button
btnLoan.addEventListener('click', function(e) {
  e.preventDefault();
  const amount = Math.floor(inputLoanAmount.value);
  if (amount > 0 && currentAccount.movements.some(mov => mov > amount * .1)) {
    setTimeout(function() {
    currentAccount.movements.push(amount);
    currentAccount.movementsDates.push(new Date().toISOString());
    updateUI(currentAccount);}, 3000)
  }
  inputLoanAmount.value = '';
  clearInterval(timer)
  timer = startLogOutTimer();
})

// Close Account
btnClose.addEventListener('click', function(e) {
  e.preventDefault();
  if (currentAccount.userName == inputCloseUsername.value &&
     currentAccount.pin == inputClosePin.value) {
      const index = accounts.findIndex(acc => acc.userName === currentAccount.userName)
      accounts.splice(index, 1);
      containerApp.style.opacity = 0;
      labelWelcome.textContent = `Log in to get started`;
      inputClosePin.value = inputCloseUsername.value = '';
  }
})
